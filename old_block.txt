{/* Build Selector & Filters */}
      <div className="space-y-4">
        <div className="flex flex-col items-center gap-4 md:grid md:grid-cols-[1fr_auto_1fr] md:items-center">
          <div className="hidden md:block" />

          <div className="w-full md:w-[320px] md:justify-self-center">
            <Popover
              open={pickerOpen}
              onOpenChange={(open) => {
                setPickerOpen(open);
                if (open) {
                  const fallbackCategory = currentCategory || availableCategories[0] || '';
                  setActiveCategory(fallbackCategory);
                  setPickerView('category');
                } else {
                  setPickerView('category');
                }
              }}
            >
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className="w-full justify-between"
                  disabled={buildsMatchingTags.length === 0}
                >
                  <div className="flex flex-col items-start text-left">
                    <span className="text-xs font-semibold uppercase text-muted-foreground">
                      {currentCategory || 'Choose a category'}
                    </span>
                    <span className="font-medium">
                      {currentBuild ? currentBuild.title : 'Select a build'}
                    </span>
                  </div>
                  <ChevronDown className="h-4 w-4 text-muted-foreground" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[320px] p-0">
                <Command>
                  {pickerView === 'category' ? (
                    <CommandList>
                      {availableCategories.length === 0 ? (
                        <CommandEmpty>No categories available.</CommandEmpty>
                      ) : (
                        <CommandGroup>
                          {availableCategories.map((category) => {
                            const buildsInCategory = groupedBuilds.get(category) ?? [];
                            const isSelected = category === currentCategory;
                            return (
                              <CommandItem
                                key={category}
                                value={category}
                                onSelect={() => handleCategoryStageSelect(category)}
                              >
                                <div className="flex flex-1 flex-col">
                                  <span className="font-medium">{category}</span>
                                  <span className="text-xs text-muted-foreground">
                                    {buildsInCategory.length} build{buildsInCategory.length === 1 ? '' : 's'}
                                  </span>
                                </div>
                                {isSelected && <Check className="h-4 w-4 text-primary" />}
                              </CommandItem>
                            );
                          })}
                        </CommandGroup>
                      )}
                    </CommandList>
                  ) : (
                    <>
                      <div className="flex items-center justify-between px-3 py-2 border-b">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="px-2"
                          onClick={handleBackToCategories}
                        >
                          <ChevronLeft className="h-4 w-4 mr-1" />
                          Categories
                        </Button>
                        <span className="text-sm font-medium">{activeCategory}</span>
                      </div>
                      <CommandList>
                        {buildsForActiveCategory.length === 0 ? (
                          <CommandEmpty>No builds available.</CommandEmpty>
                        ) : (
                          <CommandGroup>
                            {buildsForActiveCategory.map((build) => (
                              <CommandItem
                                key={build.id}
                                value={build.id}
                                onSelect={() => handleBuildSelect(build.id)}
                              >
                                <div className="flex flex-col">
                                  <span className="font-medium">{build.title}</span>
                                  {build.subCategory && (
                                    <span className="text-xs text-muted-foreground">
                                      {build.subCategory}
                                    </span>
                                  )}
                                  {build.updatedAt && (
                                    <span className="text-xs text-muted-foreground">
                                      Updated {build.updatedAt}
                                    </span>
                                  )}
                                </div>
                                {build.featured && <Star className="ml-2 h-4 w-4 text-gold-primary" />}
                                {selectedBuild === build.id && (
                                  <Check className="ml-auto h-4 w-4 text-primary" />
                                )}
                              </CommandItem>
                            ))}
                          </CommandGroup>
                        )}
                      </CommandList>
                    </>
                  )}
                </Command>
              </PopoverContent>
            </Popover>
          </div>

          {currentBuild && (
            <div className="w-full md:w-auto md:justify-self-end">
              <Button
                variant="outline"
                size="sm"
                onClick={copyBuildLink}
                className="flex w-full items-center justify-center gap-2 md:w-auto md:px-6"
              >
                <Copy className="h-4 w-4" />
                Share
              </Button>
            </div>
          )}
        </div>
      </div>

      
